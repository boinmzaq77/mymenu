<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Extra (ตัวเลือกเสริม) :" xml:space="preserve">
    <value>Extra (ตัวเลือกเสริม) :</value>
  </data>
  <data name="Loading.." xml:space="preserve">
    <value>กำลังโหลด..</value>
  </data>
  <data name="Option (ตัวเลือก) :" xml:space="preserve">
    <value>Option (ตัวเลือก) :</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>ค้นหา</value>
  </data>
  <data name="กลับ" xml:space="preserve">
    <value>กลับ</value>
  </data>
  <data name="การนำเข้าข้อมูล" xml:space="preserve">
    <value>การนำเข้าข้อมูล</value>
  </data>
  <data name="คุณต้องการลบ สินค้า" xml:space="preserve">
    <value>คุณต้องการลบ สินค้า</value>
  </data>
  <data name="จะต้องอัปโหลดไฟล์ .csv และข้อมูลกลุ่มสินค้า, ตัวเลือก, ตัวเลือกเสริม จะต้องตรงกับข้อมูลที่มีในระบบด้วย จึงจะสามารถอัปโหลดข้อมูลสินค้าได้" xml:space="preserve">
    <value>จะต้องอัปโหลดไฟล์ .csv และข้อมูลกลุ่มสินค้า, ตัวเลือก, ตัวเลือกเสริม จะต้องตรงกับข้อมูลที่มีในระบบด้วย จึงจะสามารถอัปโหลดข้อมูลสินค้าได้</value>
  </data>
  <data name="จะเป็นการสร้างเมนูที่เป็นส่วนกลาง สามารถเลือกขายเมนูอาหารตามสาขาได้ โดยจะ Default ให้เปิดขายทุกสาขา, ร้านค้าสามารถเพิ่มสินค้าได้สูงสุด 1,000 รายการ" xml:space="preserve">
    <value>จะเป็นการสร้างเมนูที่เป็นส่วนกลาง สามารถเลือกขายเมนูอาหารตามสาขาได้ โดยจะ Default ให้เปิดขายทุกสาขา, ร้านค้าสามารถเพิ่มสินค้าได้สูงสุด 1,000 รายการ</value>
  </data>
  <data name="จัดการเมนูอาหาร" xml:space="preserve">
    <value>จัดการเมนูอาหาร</value>
  </data>
  <data name="จำนวนทั้งหมด" xml:space="preserve">
    <value>จำนวนทั้งหมด</value>
  </data>
  <data name="ชื่อเมนู" xml:space="preserve">
    <value>ชื่อเมนู</value>
  </data>
  <data name="ชื่อเมนู :" xml:space="preserve">
    <value>ชื่อเมนู :</value>
  </data>
  <data name="ชื่อเมนู, ราคาปกติ, ราคาขาย, สาขาที่เปิดขาย" xml:space="preserve">
    <value>ชื่อเมนู, ราคาปกติ, ราคาขาย, สาขาที่เปิดขาย</value>
  </data>
  <data name="ดาวน์โหลดตัวอย่างไฟล์นำเข้า .csv" xml:space="preserve">
    <value>ดาวน์โหลดตัวอย่างไฟล์นำเข้า .csv</value>
  </data>
  <data name="นำเข้าข้อมูล" xml:space="preserve">
    <value>นำเข้าข้อมูล</value>
  </data>
  <data name="ยกเลิก" xml:space="preserve">
    <value>ยกเลิก</value>
  </data>
  <data name="ยังไม่มีรายการเมนูอาหาร" xml:space="preserve">
    <value>ยังไม่มีรายการเมนูอาหาร</value>
  </data>
  <data name="ยืนยันการลบรายการ" xml:space="preserve">
    <value>ยืนยันการลบรายการ</value>
  </data>
  <data name="ราคาขาย" xml:space="preserve">
    <value>ราคาขาย</value>
  </data>
  <data name="ราคาขาย :" xml:space="preserve">
    <value>ราคาขาย :</value>
  </data>
  <data name="ราคาปกติ" xml:space="preserve">
    <value>ราคาปกติ</value>
  </data>
  <data name="ราคาปกติ :" xml:space="preserve">
    <value>ราคาปกติ :</value>
  </data>
  <data name="รายการเมนูอาหาร" xml:space="preserve">
    <value>รายการเมนูอาหาร</value>
  </data>
  <data name="รายละเอียดเมนู" xml:space="preserve">
    <value>รายละเอียดเมนู</value>
  </data>
  <data name="รายละเอียดเมนู :" xml:space="preserve">
    <value>รายละเอียดเมนู :</value>
  </data>
  <data name="ลบ" xml:space="preserve">
    <value>ลบ</value>
  </data>
  <data name="ลำดับ" xml:space="preserve">
    <value>ลำดับ</value>
  </data>
  <data name="สาขาที่เปิดขาย" xml:space="preserve">
    <value>สาขาที่เปิดขาย</value>
  </data>
  <data name="สาขาที่เปิดขาย :" xml:space="preserve">
    <value>สาขาที่เปิดขาย :</value>
  </data>
  <data name="หมวดหมู่ :" xml:space="preserve">
    <value>หมวดหมู่ :</value>
  </data>
  <data name="หรือไม่?" xml:space="preserve">
    <value>หรือไม่?</value>
  </data>
  <data name="อัปโหลดไฟล์ข้อมูล .csv" xml:space="preserve">
    <value>อัปโหลดไฟล์ข้อมูล .csv</value>
  </data>
  <data name="เพิ่มเมนูอาหาร" xml:space="preserve">
    <value>เพิ่มเมนูอาหาร</value>
  </data>
  <data name="เมนูอาหาร" xml:space="preserve">
    <value>เมนูอาหาร</value>
  </data>
  <data name="ไม่พบข้อมูล" xml:space="preserve">
    <value>ไม่พบข้อมูล</value>
  </data>
  <data name="ไม่สามารถลบสินค้าได้ เนื่องจากมีการใช้งานอยู่" xml:space="preserve">
    <value>ไม่สามารถลบสินค้าได้ เนื่องจากมีการใช้งานอยู่</value>
  </data>
  <data name="ไม่สามารถลบเมนูอาหารได้ เนื่องจากมีการใช้งานอยู่" xml:space="preserve">
    <value>ไม่สามารถลบเมนูอาหารได้ เนื่องจากมีการใช้งานอยู่</value>
  </data>
  <data name="ไม่สามารถลบได้ กรุณาลองใหม่อีกครั้ง" xml:space="preserve">
    <value>ไม่สามารถลบได้ กรุณาลองใหม่อีกครั้ง</value>
  </data>
</root>